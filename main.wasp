app BlockSpot {
  wasp: {
    version: "^0.16.1"
  },

  title: "BlockSpot - Booking & Reservations",

  server: {
    setupFn: import { setupServer } from "@src/server/setup",
    middlewareConfigFn: import { corsMiddleware } from "@src/server/middleware",
  },

  head: [
    "<meta charset='utf-8' />",
    "<meta name='description' content='BlockSpot is a booking platform for small businesses.' />",
    "<meta name='author' content='BlockSpot' />",
    "<meta name='keywords' content='booking, platform, small business, booking, reservation, scheduling' />",
    "<link href='https://fonts.googleapis.com/css?family=Lato' rel='stylesheet'>",
    "<meta property='og:type' content='website' />",
    "<meta property='og:title' content='BlockSpot' />",
    "<meta property='og:site_name' content='BlockSpot' />",
    "<meta property='og:url' content='https://blockspot.com' />",
    "<meta property='og:description' content='BlockSpot is a booking platform for small businesses.' />",
    "<meta property='og:image' content='https://blockspot.com/public-banner.webp' />",
    "<meta name='twitter:image' content='https://blockspot.com/public-banner.webp' />",
    "<meta name='twitter:image:width' content='800' />",
    "<meta name='twitter:image:height' content='400' />",
    "<meta name='twitter:card' content='summary_large_image' />",
    // TODO: You can put your Plausible analytics scripts below (https://docs.opensaas.sh/guides/analytics/):
    // NOTE: Plausible does not use Cookies, so you can simply add the scripts here.
    // Google, on the other hand, does, so you must instead add the script dynamically
    // via the Cookie Consent component after the user clicks the "Accept" cookies button.
    // "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.js'></script>",  // for production
    // "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.local.js'></script>",  // for development
    "<script async src='https://www.googletagmanager.com/gtag/js?id=AW-11557893994'></script>",
    "<script>window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'AW-11557893994');</script>",

    "<script>gtag('event', 'conversion', {'send_to': 'AW-11557893994/beHdCPDH9p4aEOrunYcr', 'value': 1.0, 'currency': 'USD'});</script>",
  ],

  // üîê Auth out of the box! https://wasp-lang.dev/docs/auth/overview
  auth: {
    userEntity: User,
    methods: {
      // NOTE: If you decide to not use email auth, make sure to also delete the related routes and pages below.
      //   (RequestPasswordReset(Route|Page), PasswordReset(Route|Page), EmailVerification(Route|Page))
      email: {
        fromField: {
          name: "BlockSpot",
          email: "noah@block-spot.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/auth/email-and-pass/emails",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/auth/email-and-pass/emails",
        },
        userSignupFields: import { getEmailUserFields } from "@src/auth/userSignupFields",
      },
      // Uncomment to enable Google Auth (check https://wasp-lang.dev/docs/auth/social-auth/google for setup instructions):
      google: { // Guide for setting up Auth via Google
        userSignupFields: import { getGoogleUserFields } from "@src/auth/userSignupFields",
        configFn: import { getGoogleAuthConfig } from "@src/auth/userSignupFields",
      },
      // Uncomment to enable GitHub Auth (check https://wasp-lang.dev/docs/auth/social-auth/github for setup instructions):
      // gitHub: {
      //   userSignupFields: import { getGitHubUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getGitHubAuthConfig } from "@src/auth/userSignupFields",
      // },
      // Uncomment to enable Discord Auth (check https://wasp-lang.dev/docs/auth/social-auth/discord for setup instructions):
      // discord: {
      //   userSignupFields: import { getDiscordUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getDiscordAuthConfig } from "@src/auth/userSignupFields"
      // }
    },
    onAfterSignup: import { onAfterSignup } from "@src/auth/hooks",
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/venues",
  },


  db: {
    // Run `wasp db seed` to seed the database with the seed functions below:
    seeds: [
      // Populates the database with a bunch of fake users to work with during development.
      import { seedMockUsers } from "@src/server/scripts/dbSeeds",
    ]
  },

  client: {
    rootComponent: import App from "@src/client/App",
    setupFn: import { setupClient } from "@src/client/setup",
    envValidationSchema: import { clientEnvValidationSchema } from "@src/env",
  },

  emailSender: {
    // NOTE: "Dummy" provider is just for local development purposes.
    //   Make sure to check the server logs for the email confirmation url (it will not be sent to an address)!
    //   Once you are ready for production, switch to e.g. "SendGrid" or "Mailgun" providers. Check out https://docs.opensaas.sh/guides/email-sending/ .
    provider: SMTP,
    defaultFrom: {
      name: "BlockSpot",
      // When using a real provider, e.g. SendGrid, you must use the same email address that you configured your account to send out emails with!
      email: "noah@block-spot.com"
    },
  },
}

route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/landing-page/LandingPage"
}

route PrivacyPolicyRoute { path: "/privacy", to: PrivacyPolicyPage }
page PrivacyPolicyPage {
  component: import PrivacyPolicy from "@src/client/components/PrivacyPolicy"
}

route TermsOfServiceRoute { path: "/terms", to: TermsOfServicePage }
page TermsOfServicePage {
  component: import TermsOfService from "@src/client/components/TermsOfService"
}

route AboutRoute { path: "/about", to: AboutPage }
page AboutPage {
  component: import About from "@src/client/components/About"
}

//#region Auth Pages
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/auth/SignupPage"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordResetPage } from "@src/auth/email-and-pass/RequestPasswordResetPage",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordResetPage } from "@src/auth/email-and-pass/PasswordResetPage",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerificationPage } from "@src/auth/email-and-pass/EmailVerificationPage",
}
//#endregion

//#region User
route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import {AccountPage} from "@src/user/account/account-page"
}


route PlanRoute { path: "/plan", to: PlanPage }
page PlanPage {
  authRequired: true,
  component: import Plan from "@src/user/plan/PlanPage"
}

query getPaginatedUsers {
  fn: import { getPaginatedUsers } from "@src/user/operations",
  entities: [User]
}

action updateCurrentUserLastActiveTimestamp {
  fn: import { updateCurrentUserLastActiveTimestamp } from "@src/user/operations",
  entities: [User]
}

action updateUserById {
  fn: import { updateUserById } from "@src/user/operations",
  entities: [User]
}

query getOrganizationTags {
  fn: import { getOrganizationTags } from "@src/user/tags-operations",
  entities: [OrganizationTag, OrganizationUser]
}

query getUserTags {
  fn: import { getUserTags } from "@src/user/tags-operations",
  entities: [OrganizationTag, OrganizationUser, OrganizationUserTag]
}

action updateUserTags {
  fn: import { updateUserTags } from "@src/user/tags-operations",
  entities: [OrganizationTag, OrganizationUser, OrganizationUserTag]
}

action createTag {
  fn: import { createTag } from "@src/user/tags-operations",
  entities: [OrganizationTag, OrganizationUser]
}

action updateTag {
  fn: import { updateTag } from "@src/user/tags-operations",
  entities: [OrganizationTag, OrganizationUser]
}

action deleteTag {
  fn: import { deleteTag } from "@src/user/tags-operations",
  entities: [OrganizationTag, OrganizationUser, OrganizationUserTag]
}

action createVenue {
  fn: import { createVenue } from "@src/schedule/operations",
  entities: [Venue, User]
}

action createSpace {
  fn: import { createSpace } from "@src/schedule/operations",
  entities: [Space, Venue]
}

action createSpaces {
  fn: import { createSpaces } from "@src/schedule/operations",
  entities: [Space, Venue]
}

action updateSpacePriority {
  fn: import { updateSpacePriority } from "@src/schedule/venue/venue-operations",
  entities: [Space, User]
}

action deleteSpace {
  fn: import { deleteSpace } from "@src/schedule/operations",
  entities: [Space]
}

action updateSpace {
  fn: import { updateSpace } from "@src/schedule/operations",
  entities: [Space, Venue]
}

action updateVenue {
  fn: import { updateVenue } from "@src/schedule/operations",
  entities: [Venue]
}

action createReservation {
  fn: import { createReservation } from "@src/schedule/operations",
  entities: [Reservation, Space, Venue]
}

action deleteReservation {
  fn: import { deleteReservation } from "@src/schedule/operations",
  entities: [Reservation, Space, Venue]
}

action updateReservation {
  fn: import { updateReservation } from "@src/schedule/operations",
  entities: [Reservation, Space, Venue]
}

action updateVenueAvailability {
  fn: import { updateVenueAvailability } from "@src/schedule/operations",
  entities: [Venue, AvailabilityRule],
}

api exportCalendar {
  fn: import { exportCalendar } from "@src/schedule/calendar/operations",
  entities: [Venue, Space, Reservation],
  httpRoute: (GET, "/calendar/export")
}

//#endregion

route ScheduleRoute { path: "/schedule/:venueId", to: SchedulePage }
page SchedulePage {
  component: import SchedulePage from "@src/schedule/schedule-page",
}

route AllVenuesPageRoute { path: "/venues", to: AllVenuesPage }

page AllVenuesPage {
  authRequired: true,
  component: import AllVenuesPage from "@src/schedule/venue/all-venues-page"
}


route VenuePageRoute { path: "/venues/:venueId", to: VenuePage }
route VenuePageRouteChildren { path: "/venues/:venueId/*", to: VenuePage }

route VenueIntegrationsRoute { path: "/venues/:venueId/integrations", to: VenueIntegrationsPage }
page VenueIntegrationsPage {
  authRequired: true,
  component: import VenueIntegrationsPage from "@src/schedule/venue/venue-page/integrations-page"
}

// Stripe Connect Routes
route StripeReturnRoute { path: "/stripe-return/:accountId", to: StripeReturnPage }
page StripeReturnPage {
  authRequired: true,
  component: import StripeReturnPage from "@src/payment/stripe/pages/stripe-return"
}

route StripeRefreshRoute { path: "/stripe-refresh/:accountId", to: StripeRefreshPage }
page StripeRefreshPage {
  authRequired: true,
  component: import StripeRefreshPage from "@src/payment/stripe/pages/stripe-refresh"
}

page VenuePage {
  authRequired: true,
  component: import VenuePage from "@src/schedule/venue/venue-page/venue-page"
}

route TeamRoute { path: "/team", to: TeamPage }
page TeamPage {
  authRequired: true,
  component: import TeamPage from "@src/team/TeamPage"
}

//#region Demo AI App
route DemoAppRoute { path: "/demo-app", to: DemoAppPage }
page DemoAppPage {
  authRequired: true,
  component: import DemoAppPage from "@src/demo-ai-app/DemoAppPage"
}

query getVenueById {
  fn: import { getVenueById } from "@src/schedule/operations",
  entities: [Venue, Space]
}

query getVenueSchedule {
  fn: import { getVenueSchedule } from "@src/schedule/operations",
  entities: [User, Space]
}

query getVenueDetails {
  fn: import { getVenueDetails } from "@src/schedule/venue/venue-operations",
  entities: [User, Venue, Space]
}

query getVenueInfo {
  fn: import { getVenueInfo } from "@src/schedule/operations",
  entities: [User, Venue, Space]
}

query getAllVenues {
  fn: import { getAllVenues } from "@src/schedule/operations",
  entities: [User, Venue, Space]
}

action generateGptResponse {
  fn: import { generateGptResponse } from "@src/demo-ai-app/operations",
  entities: [User, Task, GptResponse, Venue]
}

action createTask {
  fn: import { createTask } from "@src/demo-ai-app/operations",
  entities: [Task]
}

action deleteTask {
  fn: import { deleteTask } from "@src/demo-ai-app/operations",
  entities: [Task]
}

action updateTask {
  fn: import { updateTask } from "@src/demo-ai-app/operations",
  entities: [Task]
}

query getGptResponses {
  fn: import { getGptResponses } from "@src/demo-ai-app/operations",
  entities: [User, GptResponse]
}

query getAllTasksByUser {
  fn: import { getAllTasksByUser } from "@src/demo-ai-app/operations",
  entities: [Task]
}
//#endregion

//#region Payment
route PricingPageRoute { path: "/pricing", to: PricingPage }
page PricingPage {
  component: import PricingPage from "@src/payment/PricingPage"
}

route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  authRequired: true,
  component: import Checkout from "@src/payment/CheckoutPage"
}

query getUserOrganization {
  fn: import { getUserOrganization } from "@src/organization/operations",
  entities: [User, Organization, OrganizationUser]
}

query getUserOrganizations {
  fn: import { getUserOrganizations } from "@src/organization/operations",
  entities: [User, Organization, OrganizationUser]
}

query getCustomerPortalUrl {
  fn: import { getCustomerPortalUrl } from  "@src/payment/operations",
  entities: [User, Organization]
}

action generateCheckoutSession {
  fn: import { generateCheckoutSession } from "@src/payment/operations",
  entities: [User, Organization]
}

api paymentsWebhook {
  fn: import { paymentsWebhook } from "@src/payment/webhook",
  entities: [User, Organization],
  middlewareConfigFn: import { paymentsMiddlewareConfigFn } from "@src/payment/webhook",
  httpRoute: (POST, "/payments-webhook")
}

action createStripeAccountLink {
  fn: import { createStripeAccountLink } from "@src/payment/stripe/operations",
  entities: [User, Organization]
}

action createConnectCheckoutSession {
  fn: import { createConnectCheckoutSession } from "@src/payment/stripe/operations",
  entities: [User, Organization]
}

action createStripeAccount {
  fn: import { createStripeAccount } from "@src/payment/stripe/operations",
  entities: [User, Organization],
}

// Payment rule operations
action updatePaymentRules {
  fn: import { updatePaymentRules } from "@src/payment/payment-rules/operations.js",
  entities: [PaymentRule, Venue]
}

query getVenuePaymentRules {
  fn: import { getVenuePaymentRules } from "@src/payment/payment-rules/operations.js",
  entities: [PaymentRule, Venue]
}

query getReservationPrice {
  fn: import { getReservationPrice } from "@src/payment/payment-rules/calculate-price.js",
  entities: [PaymentRule, Venue, Reservation, Space]
}
//#endregion

//#region File Upload
route FileUploadRoute { path: "/file-upload", to: FileUploadPage }
page FileUploadPage {
  authRequired: true,
  component: import FileUpload from "@src/file-upload/FileUploadPage"
}

action createFile {
  fn: import { createFile } from "@src/file-upload/operations",
  entities: [User, File]
}

query getAllFilesByUser {
  fn: import { getAllFilesByUser } from "@src/file-upload/operations",
  entities: [User, File]
}

query getDownloadFileSignedURL {
  fn: import { getDownloadFileSignedURL } from "@src/file-upload/operations",
  entities: [User, File]
}
//#endregion

//#region Analytics
query getDailyStats {
  fn: import { getDailyStats } from "@src/analytics/operations",
  entities: [User, DailyStats]
}

job dailyStatsJob {
  executor: PgBoss,
  perform: {
    fn: import { calculateDailyStats } from "@src/analytics/stats"
  },
  schedule: {
    cron: "0 * * * *" // every hour. useful in production
    // cron: "* * * * *" // every minute. useful for debugging
  },
  entities: [User, DailyStats, Logs, PageViewSource]
}
//#endregion

//#region Admin Dashboard
route AdminRoute { path: "/admin", to: AnalyticsDashboardPage }
page AnalyticsDashboardPage {
  authRequired: true,
  component: import AnalyticsDashboardPage from "@src/admin/dashboards/analytics/AnalyticsDashboardPage"
}

route AdminUsersRoute { path: "/admin/users", to: AdminUsersPage }
page AdminUsersPage {
  authRequired: true,
  component: import AdminUsers from "@src/admin/dashboards/users/UsersDashboardPage"
}

route AdminSettingsRoute { path: "/admin/settings", to: AdminSettingsPage }
page AdminSettingsPage {
  authRequired: true,
  component: import AdminSettings from "@src/admin/elements/settings/SettingsPage"
}

route AdminChartsRoute { path: "/admin/chart", to: AdminChartsPage }
page AdminChartsPage {
  authRequired: true,
  component: import AdminCharts from "@src/admin/elements/charts/ChartsPage"
}

route AdminFormElementsRoute { path: "/admin/forms/form-elements", to: AdminFormElementsPage }
page AdminFormElementsPage {
  authRequired: true,
  component: import AdminForms from "@src/admin/elements/forms/FormElementsPage"
}

route AdminFormLayoutsRoute { path: "/admin/forms/form-layouts", to: AdminFormLayoutsPage }
page AdminFormLayoutsPage {
  authRequired: true,
  component: import AdminForms from "@src/admin/elements/forms/FormLayoutsPage"
}

route AdminCalendarRoute { path: "/admin/calendar", to: AdminCalendarPage }
page AdminCalendarPage {
  authRequired: true,
  component: import AdminCalendar from "@src/admin/elements/calendar/CalendarPage"
}

route AdminUIAlertsRoute { path: "/admin/ui/alerts", to: AdminUIAlertsPage }
page AdminUIAlertsPage {
  authRequired: true,
  component: import AdminUI from "@src/admin/elements/ui-elements/AlertsPage"
}

route AdminUIButtonsRoute { path: "/admin/ui/buttons", to: AdminUIButtonsPage }
page AdminUIButtonsPage {
  authRequired: true,
  component: import AdminUI from "@src/admin/elements/ui-elements/ButtonsPage"
}

route NotFoundRoute { path: "*", to: NotFoundPage }
page NotFoundPage {
  component: import { NotFoundPage } from "@src/client/components/NotFoundPage"
}
//#endregion

//#region Contact Form Messages
// TODO: 
// add functionality to allow users to send messages to admin
// and make them accessible via the admin dashboard
route AdminMessagesRoute { path: "/admin/messages", to: AdminMessagesPage }
page AdminMessagesPage {
  authRequired: true,
  component: import AdminMessages from "@src/messages/MessagesPage"
}
//#endregion

//#region Newsletter
job sendNewsletter {
  executor: PgBoss,
  perform: {
    fn: import { checkAndQueueNewsletterEmails } from "@src/newsletter/sendNewsletter"
  },
  schedule: {
    cron: "0 7 * * 1" // at 7:00 am every Monday
  },
  entities: [User]
}
//#endregion

query listInvitations {
  fn: import { listInvitations } from "@src/organization/operations.js",
  entities: [Organization, Invitation, OrganizationUser]
}

action createInvitation {
  fn: import { createInvitation } from "@src/organization/operations.js",
  entities: [Organization, Invitation, OrganizationUser, User]
}

action acceptInvitation {
  fn: import { acceptInvitation } from "@src/organization/operations.js",
  entities: [Organization, Invitation, OrganizationUser]
}

action cancelInvitation {
  fn: import { cancelInvitation } from "@src/organization/operations.js",
  entities: [Organization, Invitation, OrganizationUser]
}

action updateMemberRole {
  fn: import { updateMemberRole } from "@src/organization/operations.js",
  entities: [Organization, OrganizationUser]
}

route AcceptInvitationRoute { path: "/accept-invitation", to: AcceptInvitationPage }
page AcceptInvitationPage {
  component: import { AcceptInvitationPage } from "@src/organization/accept-invitation-page"
}

route InvitationRoute { path: "/invitation/:token", to: InvitationPage }
page InvitationPage {
  component: import { InvitationPage } from "@src/organization/invitation-page"
}

query getInvitationDetails {
  fn: import { getInvitationDetails } from "@src/organization/operations.js",
  entities: [Organization, Invitation]
}

route OrganizationOnboardingRoute { 
  path: "/onboarding/:step?", 
  to: OrganizationOnboardingPage 
}

page OrganizationOnboardingPage {
  component: import { OrganizationOnboardingPage } from "@src/organization/onboarding/OnboardingPage.tsx",
  authRequired: true
}

action createOrganization {
  fn: import { createOrganization } from "@src/organization/operations.js",
  entities: [Organization]
}

action updateOnboardingState {
  fn: import { updateOnboardingState } from "@src/organization/operations.js",
  entities: [Organization, OrganizationUser, OnboardingState]
}

query getUserOrganizationRole {
  fn: import { getUserOrganizationRole } from "@src/organization/operations.js",
  entities: [OrganizationUser, User]
}

query searchUsers {
  fn: import { searchUsers } from "@src/user/operations",
  entities: [User, OrganizationUser]
}
