datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  users     OrganizationUser[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  datePaid        DateTime?


  // Billing and subscription fields
  stripeCustomerId       String?   @unique
  stripeAccountId        String?   @unique
  subscriptionStatus     String?   // 'active', 'trialing', 'past_due', 'canceled'
  subscriptionPlanId     String?
  trialEndsAt           DateTime?

  type String?

  // Relations
  invitations           Invitation[]
  onboardingState       OnboardingState?

  venues        Venue[]
  tags          OrganizationTag[]
}

model OrganizationTag {
  id             String   @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  name           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relation back to users assigned this tag
  organizationUserTags OrganizationUserTag[]
}

model OrganizationUserTag {
  id                   String           @id @default(uuid())
  organizationUserId   String
  organizationUser     OrganizationUser @relation(fields: [organizationUserId], references: [id])
  organizationTagId    String
  organizationTag      OrganizationTag  @relation(fields: [organizationTagId], references: [id])

  @@unique([organizationUserId, organizationTagId])
}

enum OrganizationUserRole {
  OWNER
  MEMBER
}

model OrganizationUser {
  id        String   @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  userId String
  user   User @relation(fields: [userId], references: [id])

  role OrganizationUserRole @default(MEMBER)

  // Use join table to attach tags
  tags            OrganizationUserTag[]
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String?

  organizations   OrganizationUser[]
  sentInvitations Invitation[] @relation("SentInvitations")

  email               String?  @unique
  username            String?  @unique
  lastActiveTimestamp DateTime @default(now())
  isAdmin             Boolean  @default(false)

  paymentProcessorUserId        String?   @unique
  subscriptionStatus            String? // 'active', 'cancel_at_period_end', 'past_due', 'deleted'
  subscriptionPlan              String? // 'hobby', 'pro'
  sendNewsletter                Boolean   @default(false)
  datePaid                      DateTime?
  credits                       Int       @default(3)

  gptResponses        GptResponse[]
  contactFormMessages ContactFormMessage[]
  tasks               Task[]
  files               File[]

  reservations Reservation[]
  createdReservations Reservation[] @relation("CreatedReservations")
}

model GptResponse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
}

model Task {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  description String
  time        String  @default("1")
  isDone      Boolean @default(false)
}

model File {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  type      String
  key       String
  uploadUrl String
}

model DailyStats {
  id   Int      @id @default(autoincrement())
  date DateTime @unique @default(now())

  totalViews                Int    @default(0)
  prevDayViewsChangePercent String @default("0")
  userCount                 Int    @default(0)
  paidUserCount             Int    @default(0)
  userDelta                 Int    @default(0)
  paidUserDelta             Int    @default(0)
  totalRevenue              Float  @default(0)
  totalProfit               Float  @default(0)

  sources PageViewSource[]
}

model PageViewSource {
  name String
  date DateTime @default(now())

  dailyStats   DailyStats? @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId Int?

  visitors Int

  @@id([date, name])
}

model Logs {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  message String
  level   String
}

model ContactFormMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  content   String
  isRead    Boolean   @default(false)
  repliedAt DateTime?
}

// Reservations 
model Reservation {
  id          String            @id @default(uuid())
  createdById   String?          
  createdByUser   User?              @relation("CreatedReservations", fields: [createdById], references: [id])
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  startTime   DateTime
  endTime     DateTime
  status      ReservationStatus
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  spaceId     String
  space       Space             @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  description String?
  
  // Relation to payment
  payment     Payment?
}

model Payment {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Reservation relation
  reservationId String        @unique  // one-to-one relation
  reservation   Reservation   @relation(fields: [reservationId], references: [id])
  
  stripeCheckoutSessionId String?
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model PaymentRule {
  id          String    @id @default(uuid())
  venueId     String    
  venue       Venue     @relation(fields: [venueId], references: [id], onDelete: Cascade)
  spaceIds    String[]  @default([]) // Applies to specific spaces or all if empty

  // Rule Ordering
  priority    Int       // Determines stacking order, lower = applied first
  ruleType    RuleType  // BASE_RATE, MULTIPLIER, DISCOUNT, FLAT_FEE
  
  // Pricing
  pricePerPeriod Decimal?  // Price for a specific time period (e.g., $10 for 30 minutes)
  periodMinutes Int? // e.g., 30 for 30-minute pricing
  multiplier    Decimal?  // Multiplier for peak hours, weekends, etc.
  discountRate  Decimal?  // Used if ruleType == DISCOUNT

  // Time-based Conditions
  startTime   Int? // Minutes from midnight (e.g., 0 for 12:00 AM)
  endTime     Int? // Minutes from midnight (e.g., 1439 for 11:59 PM)
  daysOfWeek  Int[] // Array of 0-6 (Sunday = 0, Monday = 1, ..., Saturday = 6)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  conditions PriceCondition[]
}

model PriceCondition {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  paymentRuleId String
  paymentRule PaymentRule @relation(fields: [paymentRuleId], references: [id], onDelete: Cascade)

  startTime   Int? // Minutes from midnight (e.g., 0 for 12:00 AM)
  endTime     Int? // Minutes from midnight (e.g., 1439 for 11:59 PM)
  userTags    String[] // Example: "the holder's set of tags"
}

enum RuleType {
  BASE_RATE      
  MULTIPLIER     
  DISCOUNT       
  FLAT_FEE       
}
// venue and space
model Venue {
  id        String   @id @default(uuid())
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])

  name      String
  contactEmail String @default("")
  address   String
  announcements String @default("")
  timeZoneId String @default("America/New_York") // IANA timezone identifier
  spaces    Space[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  displayStart Int @default(480)
  displayEnd   Int @default(1080)

  availabilityRules AvailabilityRule[] // Venue-level availability rules
  paymentRules      PaymentRule[] // Add payment rules relation
}

model Space {
  id           String        @id @default(uuid())
  priority     Int           @default(0)
  name         String
  venueId      String
  venue        Venue         @relation(fields: [venueId], references: [id])
  type         String // e.g., Conference Room, Desk, Hall
  capacity     Int // Optional: Maximum capacity
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}


model AvailabilityRule {
  id          String    @id @default(uuid())
  venueId     String    // Availability applies at venue level
  venue       Venue     @relation(fields: [venueId], references: [id])
  // in the future maybe add a FK constraint on spaceIds

  spaceIds    String[] @default([]) // Optional: Availability applies at space level
  days        String[] // Example: ["Mon", "Tue", "Wed"]
  startTimeMinutes   Int
  endTimeMinutes     Int

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Invitation {
  id            String   @id @default(uuid())
  email         String
  role          OrganizationUserRole
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  invitedBy     User    @relation("SentInvitations", fields: [invitedById], references: [id])
  invitedById   String
  
  status        InvitationStatus @default(PENDING)
  token         String   @unique
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}


model OnboardingState {
  id              String   @id @default(uuid())
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String   @unique
  
  // Onboarding steps completion
  hasCompletedProfile    Boolean @default(false)
  hasAddedPaymentMethod  Boolean @default(false)
  hasInvitedMembers     Boolean @default(false)
  hasCreatedFirstSpace  Boolean @default(false)
  hasCompletedOnboarding Boolean @default(false)
  hasSelectedPlan       Boolean @default(false)

  currentStep     String  @default("Welcome")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}